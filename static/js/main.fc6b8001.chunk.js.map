{"version":3,"sources":["myBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","dbService","firestore","authService","auth","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottm","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentURL","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","faTimes","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","getMyNweets","where","get","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","Init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc6b8001.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n  // Initialize Firebase\r\n firebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const authService = firebase.auth();\r\nexport const storageService = firebase.storage();","import React, { useState } from \"react\";\r\nimport { authService } from \"myBase\";\r\n\r\nconst inputStyles = {};\r\n\r\nconst AuthForm = () =>{\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        const { \r\n            target: {name, value} \r\n        } = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        }else if(name === \"password\"){\r\n            setPassword(value);        \r\n        }\r\n    };\r\n    const onSubmit = async(event) =>{\r\n        // 사용자가 컨트롤할 수 있도록, event를 Default 상태로 되돌려놓지 않겠다는 의미\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n                if(newAccount){\r\n                    // create account\r\n                    data = await authService.createUserWithEmailAndPassword(\r\n                        email, password\r\n                    );\r\n                }\r\n                //else login\r\n                else{\r\n                    data = await authService.signInWithEmailAndPassword(\r\n                        email, password\r\n                    );\r\n                }\r\n                console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n    \r\n    return (\r\n    <>\r\n        <form onSubmit={onSubmit} className=\"container\">       \r\n        <input \r\n            name=\"email\"\r\n            type=\"email\" \r\n            placeholder=\"Email\" \r\n            required \r\n            value={email} \r\n            onChange={onChange}\r\n            className=\"authInput\"\r\n        />\r\n        <input \r\n            name=\"password\"\r\n            type=\"password\" \r\n            placeholder=\"Password\" \r\n            required \r\n            value={password} \r\n            className=\"authInput\"\r\n            onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={ newAccount ? \"Create Account\" : \"Login\" } className=\"authInput authSubmit\"/>  \r\n        {error && <span className=\"authError\">{error}</span>}\r\n    </form> \r\n    <span onClick={toggleAccount} className=\"authSwitch\"> {newAccount ? \"Sign in\" : \"Create Account\"} </span>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"../myBase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth= () => {\r\n    const onSocialClick = async (event) => {\r\n        const {target:{name},\r\n        } = event;\r\n        let provider;\r\n        if (name === \"google\"){\r\n            // Google 소셜 로그인\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name === \"github\"){\r\n            // GitHub 소셜 로그인\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n\r\n    return(\r\n    <div className=\"authContainer\">\r\n        <FontAwesomeIcon\r\n            icon={faTwitter}\r\n            color={\"#04AAFF\"}\r\n            size=\"3x\"\r\n            style={{ marginBottm: 30 }}\r\n        />\r\n        <AuthForm />\r\n        <div className=\"autoBtns\">\r\n            <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                Continue with Google <FontAwesomeIcon icon={faGoogle}/>\r\n                </button>\r\n            <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                Continue with GitHub <FontAwesomeIcon icon={faGithub}/>\r\n                </button>\r\n        </div>\r\n    </div>);\r\n};\r\nexport default Auth;","/* \r\n  Component name: Nweet.js \r\n  Description: Nweet message update and delete component (if your own nweet) \r\n  Author: Hyun-wook Hong\r\n*/\r\nimport { dbService, storageService } from \"myBase\";\r\nimport React, {useState} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const OK = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        //console.log(OK)\r\n        if(OK){\r\n            // delete nweet\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            await storageService.refFromURL(nweetObj.attachmentURL).delete();\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => { \r\n        event.preventDefault(); \r\n        //console.log(nweetObj, newNweet);\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet,\r\n        });\r\n        setEditing(false);\r\n    } \r\n    const onChange = (event) =>{\r\n        const { target: {value},\r\n                } = event;\r\n        setNewNweet(value);\r\n    }\r\n    return (\r\n    <div className=\"nweet\">\r\n        { editing ? ( \r\n            <>\r\n            <form onSubmit={onSubmit} className=\"container nweetEdit\" >\r\n                <input type=\"text\" placeholder=\"Edit your nweet\" value={newNweet} required autoFocus onChange={onChange} className=\"formInput\"/>\r\n                <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\"/>\r\n            </form>\r\n            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n                </span>\r\n            </>\r\n         ) \r\n         : \r\n        (<>\r\n        <h4>{nweetObj.text}</h4>\r\n        {nweetObj.attachmentURL && <img src={nweetObj.attachmentURL} />}\r\n        { isOwner && (\r\n            <div className=\"nweet__actions\">\r\n                <span onClick={onDeleteClick} >\r\n                    <FontAwesomeIcon icon={faTrash}/>\r\n                </span>\r\n                <span onClick={toggleEditing} >\r\n                    <FontAwesomeIcon icon={faPencilAlt}/>\r\n                </span>\r\n            </div>\r\n            )}\r\n        </>\r\n    )}    \r\n    </div> \r\n    );\r\n};\r\n\r\nexport default Nweet;","import {React, useState } from \"react\";\r\nimport { storageService, dbService } from \"myBase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/*\r\n    Title: NweetFactory.js\r\n    Refactoying at: 2021-05-10\r\n    Description: creating Nweet component \r\n*/\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    // onSubmit에서 전송할 nweet state\r\n    const [nweet, setNweet] = useState(\"\");\r\n    // 파일첨부 state\r\n    const [attachment, setAttachment] = useState(\"\");    \r\n\r\n    const onSubmit = async (event) => {\r\n        if (nweet === \"\"){\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n\r\n        let attachmentURL = \"\";\r\n        if(attachment !== \"\")\r\n        {\r\n            // 5/7 npm install uuid --> uuid는 어떠한 식별자를 랜덤으로 생성해줌\r\n            const attachmentRef = storageService\r\n                .ref()\r\n                .child(`${userObj.uid}/${uuidv4()}`)\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentURL = await response.ref.getDownloadURL();\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentURL\r\n        };\r\n        dbService.collection(\"nweets\").add(nweetObj);\r\n         // 데이터 보내고 나면 Nweet value, attachmentURL은 빈 문자열로.\r\n         setNweet(\"\");\r\n         setAttachment(\"\");\r\n    }\r\n\r\n    const onChange = (event) =>{\r\n        const {\r\n             target:{value}, \r\n            } = event;\r\n            setNweet(value);\r\n    };\r\n    //console.log(nweets);\r\n    const onFileChange = (event) => {\r\n        const {\r\n          target: { files },\r\n        } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {\r\n                currentTarget: { result },\r\n              } = finishedEvent;\r\n              setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n      };\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <form onSubmit={ onSubmit } className=\"factoryForm\">\r\n        <div className=\"factoryInput__container\">\r\n            <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" className=\"factoryInput__input\" maxLength={120} />\r\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n        </div>\r\n        <label for=\"attach-file\" className=\"factoryInput__label\">\r\n            <span>Add photos</span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n        <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange}\r\n               style={{\r\n                   opacity: 0,\r\n               }}/>\r\n        { attachment && \r\n        (\r\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}> \r\n                <span>Remove</span> \r\n                <FontAwesomeIcon icon={faTimes}></FontAwesomeIcon>\r\n            </div> )\r\n        }\r\n    </form>\r\n    );\r\n}\r\nexport default NweetFactory;","import React, {useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { authService, dbService, firebaseInstance, storageService } from \"myBase\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\n// Tweet을 날릴 수 있는 Home route -> Firebase DB와 연동\r\n// Firebase의 DB는 NoSQL임 (간단, 강력, Vㅔ리 플렉서블)\r\n\r\n// 5/4 Auth.js에서 로그인할 때 기록한 유저 정보를 props로 받아왔다.\r\nconst Home= ({ userObj }) => {\r\n    //console.log(userObj);\r\n    // firebase DB에서 가져온 nweet state\r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    // 5/4 getNweets 방식을 snapshot에서 가져오는 방식으로 변경한다.\r\n    useEffect(()=>{  \r\n        //onSnapshot: DB의 변화를 실시간으로 알려준다. - 공식문서에 나옴\r\n        //onSnapshot에 아래와 같이 orderBy 옵션을 줄 수 있다.\r\n        dbService.collection(\"nweets\").orderBy(\"createdAt\", \"desc\").onSnapshot((snapshot) => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n              }));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj} />\r\n        <div style={{ marginTop: 30 }}>\r\n            {nweets.map((nweet) => (\r\n                <Nweet \r\n                    key={nweet.id} \r\n                    nweetObj={nweet} \r\n                    isOwner={nweet.creatorId === userObj.uid} \r\n                />\r\n            ))}\r\n        </div>\r\n    </div>\r\n        );\r\n    };\r\n\r\nexport default Home;","import { authService, dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Auth from \"./Auth\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut()\r\n        history.push(\"/\");\r\n    };\r\n    const onChange = (event) =>{\r\n        const{\r\n            target: { value },\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    };\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n        }\r\n        refreshUser();\r\n    };\r\n\r\n    const getMyNweets = async () => \r\n    {\r\n        /*\r\n            SQL 구문으로 치면..\r\n            SELECT * FROM nweets\r\n                WHERE USER_ID = :내아이디\r\n            ORDER BY createdAt\r\n\r\n            이지만 Firestore는 noSQL 기반이므로 인덱스 생성해줘야함\r\n        */\r\n\r\n        const nweets = await dbService.collection(\"nweets\")\r\n                        .where(\"creatorID\", \"==\", userObj.uid)\r\n                        .orderBy(\"createdAt\")\r\n                        .get();\r\n        console.log( nweets.docs.map((doc) => doc.data() ));\r\n    };\r\n    // userObj에서 '내 트윗목록'을 뽑아오기 위한 useEffect 함수 내의 getMyNweets 구현\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Display name\" value={newDisplayName} className=\"formInput\" />\r\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop: 10, }}/>\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\r\n        </div>\r\n        ); \r\n};","/* Navigation component */\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => \r\n<nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAF\"} size=\"2x\" />\r\n        </Link>\r\n        </li>\r\n        <li>\r\n        <Link to=\"/profile\" \r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}'s Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n        </li>\r\n    </ul>\r\n</nav>\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\nimport       Auth from \"routes/Auth\";\r\nimport       Home from \"routes/Home\";\r\nimport    Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\n\r\n/*\r\nisLoggedIn && <Navigation /> --> 무조건 true여야만 Navagation component 출력함\r\n*/\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => { \r\n    return (\r\n    <Router>\r\n        {isLoggedIn && <Navigation userObj={userObj} />}\r\n        <Switch>\r\n            {isLoggedIn ? (\r\n                <div\r\n                    style={{\r\n                        maxWidth: 800,\r\n                        width: \"100%\",\r\n                        margin: \"0 auto\",\r\n                        marginTop: 80,\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}>\r\n                    <Route exact path=\"/\">\r\n                    <Home userObj={userObj} />\r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                    <Profile refreshUser={refreshUser} userObj={userObj}/>\r\n                    </Route>\r\n                    <Redirect from=\"*\" to=\"/\" /> \r\n                </div>\r\n            ) : (\r\n            <>\r\n                <Route> \r\n                    <Auth exact path=\"/\"/> \r\n                </Route> \r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </>\r\n            )}\r\n        </Switch>\r\n    </Router>\r\n    );\r\n};\r\nexport default AppRouter;","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myBase\";\n\nfunction App() {\n  // firebase의 auth 모듈 호출\n  // authService.currentUser => 사용자 로그인 여부 true or false 반환\n  // login 했으면 home, 안 했으면 login 페이지로\n  const [Init, setInit] = useState(false);\n\n  // 5/3 login 후 로그인여부 확인하도록 isLoggedIn, useState 변경\n  // 5/4 01 userObj Object에서 User 로그인 정보를 받아오기 때문에 isLoggedIn이라는 state를 중복해서 쓸 필욘 없다. (선택하면됨, 난 선택)\n  //const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        // 5/4 01 \n        // setIsLoggedIn(true);\n        // 5/10 setUserObj minimalize\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }else{ \n        setUserObj(null); \n      }\n      setInit(true);\n    });\n\n  }, []);\n  // user 새로고침 시 업데이트\n  const refreshUser = () =>{\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n    { Init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"Initializing....\" }\n    </>\n  );\n}\n// <footer>&copy;  { new Date().getFullYear() } Nwitter</footer> \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}